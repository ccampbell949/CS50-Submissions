import os

from cs50 import SQL
from flask import Flask, flash, redirect, render_template, request, session
from flask_session import Session
from tempfile import mkdtemp
from werkzeug.exceptions import default_exceptions, HTTPException, InternalServerError
from werkzeug.security import check_password_hash, generate_password_hash

from helpers import apology, login_required, lookup, usd

# Configure application
app = Flask(__name__)

# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True

# Ensure responses aren't cached


@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response


# Custom filter
app.jinja_env.filters["usd"] = usd

# Configure session to use filesystem (instead of signed cookies)
app.config["SESSION_FILE_DIR"] = mkdtemp()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///finance.db")

# Make sure API key is set
if not os.environ.get("API_KEY"):
    raise RuntimeError("API_KEY not set")
    

@app.route("/addcash", methods=["GET", "POST"])  # personal touch - allow user to add cash
@login_required
def addcash():
    if request.method == "POST":
        db.execute("""UPDATE users
        SET cash = cash + :amount
        WHERE id=:user_id
        """, amount=request.form.get("cash"),  # name of field in form cash
                   user_id=session["user_id"])  # user id from the current session
        # primary key from users table is "id" and I'm using it as user_id
        flash("Cash Added!")
        return redirect("/")
        
    else:
        return render_template("addcash.html")
        
    
@app.route("/")
@login_required  # show all transations that have been made
def index():
    rows = db.execute("""
    SELECT symbol, SUM(shares) as totalShares
    FROM transaction_history
    WHERE user_id= :user_id
    GROUP BY symbol
    HAVING totalShares > 0;
    """, user_id=session["user_id"])
    holdings = []  # index
    total = 0
    for row in rows:
        # create dictionary
        stock = lookup(row["symbol"])
        holdings.append({
            "symbol": stock["symbol"],
            "name": stock["name"],
            "shares": row["totalShares"],
            "price": usd(stock["price"]),
            "total": usd((stock["price"] * row["totalShares"]))
        })
        total += stock["price"] * row["totalShares"]  # total value of shares
    rows = db.execute("SELECT cash FROM users WHERE id=:user_id", user_id=session["user_id"])
    cash = rows[0]["cash"]
    total += cash
        
    #"""Show portfolio of stocks"""
    return render_template("index.html", holdings=holdings, cash=usd(cash), total=usd(total))


@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():  # use same checks as Quote i.e. checking the symbol is valid
    """Buy shares of stock"""
    
    if request.method == "POST":

        # Ensure symbol was submitted
        if not request.form.get("symbol"):  # Check stock symbol is submitted
            return apology("must provide stock symbol", 400)
            
        if not request.form.get("shares"):  # must provide a stock amount
            return apology("must provide stock amount", 400)
            
        if not request.form.get("shares").isdigit:  # check that share amount is numeric
            return apology("Invalid Value", 400)  
            
        symbol = request.form.get("symbol").upper()
        
        try:
            shares = int(request.form.get("shares"))  # check shares value is an integer
        except ValueError:
            return apology("Invalid Value", 400)
        
        if shares < 1:
            return apology("Invalid Value", 400)
            
        stock = lookup(symbol)
        
        if stock is None:  # ensure stock symbol iS valid
            return apology("Please enter valid stock", 400)
        # reduce the cash of session user by stock buy amount. Only from session user
        rows = db.execute("SELECT cash FROM users WHERE id=:id", id=session["user_id"])
        cash = rows[0]["cash"]  # get current cash amount of user
        
        newcash = cash - shares * stock["price"]
        if newcash < 0:
            return apology("Insufficient Funds")  # apologies id funds are insufficient
        db.execute("UPDATE users SET cash=:newcash where id=:id",  # update user money with new updated total
                   newcash=newcash,
                   id=session["user_id"])
                    
        # need to insert 4 things as user id is taken from user table and timestamp is autogenerated
        db.execute("""INSERT INTO transaction_history (user_id, symbol, shares, price)
                        VALUES(:user_id, :symbol, :shares, :price)
                
                        """,
                   user_id=session["user_id"],
                   symbol=stock["symbol"],
                   shares=shares,
                   price=stock["price"]
                   )
        flash("Transaction Complete!")
        return redirect("/")
    
    else:
        return render_template("buy.html")
    

@app.route("/history")
@login_required
def history():
    """Show history of transactions"""
    # need symbol, number of shares, price and transaction date
    
    transaction_history = db.execute("""
    SELECT symbol, shares, price, transactionDate
    FROM transaction_history
    WHERE user_id=:user_id
    
    """, user_id=session["user_id"])
    for i in range(len(transaction_history)):
        transaction_history[i]["price"] = usd(transaction_history[i]["price"])
    return render_template("history.html", transaction_history=transaction_history)

    return apology("TODO")


@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 400)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 400)

        # Query database for username
        rows = db.execute("SELECT * FROM users WHERE username = ?", request.form.get("username"))

        # Ensure username exists and password is correct
        if len(rows) != 1 or not check_password_hash(rows[0]["hash"], request.form.get("password")):
            return apology("invalid username and/or password", 400)

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")


@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/")


@app.route("/quote", methods=["GET", "POST"])
@login_required
def quote():
    """Get stock quote."""
    if request.method == "POST":
        # Ensure symbol was submitted
        if not request.form.get("symbol"):
            return apology("must provide stock symbol", 400)
            
        symbol = request.form.get("symbol").upper()  # convert user entered text to uppercase
        stock = lookup(symbol)
        if stock is None:  # ensure stock symbol iS valid
            return apology("Please enter valid stock", 400)
        return render_template("stockquote.html", stockName={
            
            "name": stock["name"],  # show stockname, symbol and current price
            "symbol": stock["symbol"],
            "price": usd(stock["price"])
        })
    
    else:
        return render_template("quote.html")


@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        
        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 400)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 400)
            
        # Ensure passwords match
        if not request.form.get("confirmation"):
            return apology("passwords must match", 400)
        
        if not request.form.get("confirmation") == request.form.get("password"):
            return apology("passwords must match")
            
        try:
            prim_key = db.execute("INSERT INTO users (username, hash) VALUES (:username, :hash)",
                                  username=request.form.get("username"),
                                  hash=generate_password_hash(request.form.get("password")))
                        
            flash("Registered!")
            return redirect("/history")
        
        except:
            return apology("Username already exists", 400)
       
    else:
        
        return render_template("register.html")
        

@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():  # similar code to "buy"
    """Sell shares of stock"""
    if request.method == "POST":

        # Ensure symbol was submitted
        if not request.form.get("symbol"):
            return apology("must provide stock symbol", 400)
            
        symbol = request.form.get("symbol").upper()
        shares = int(request.form.get("shares"))
        stock = lookup(symbol)
        if stock is None:  # ensure stock symbol iS valid
            return apology("Please enter valid stock", 400)
        # reduce the cash of session user by stock buy amount. Only from session user
        
        rows = db.execute("""
            SELECT symbol, SUM(shares) as totalShares
            FROM transaction_history
            WHERE user_id=:user_id
            GROUP BY symbol
            HAVING totalShares > 0;
            
        """, user_id=session["user_id"])
        for row in rows:
            if row["symbol"] == symbol:
                if shares > row["totalShares"]:
                    return apology("Insufficient Shares")
        
        rows = db.execute("SELECT cash FROM users WHERE id=:id", id=session["user_id"])
        cash = rows[0]["cash"]  # get current cash amount of user
        
        newcash = cash + shares * stock["price"]
        if newcash < 0:
            return apology("Insufficient Funds")  # apologies id funds are insufficient
        db.execute("UPDATE users SET cash=:newcash where id=:id",  # update user money with new updated total
                   newcash=newcash,
                   id=session["user_id"])
                    
        # need to insert 4 things as user id is taken from user table and timestamp is autogenerated
        db.execute("""INSERT INTO transaction_history (user_id, symbol, shares, price)
                        VALUES(:user_id, :symbol, :shares, :price)
                
                        """,
                   user_id=session["user_id"],
                   symbol=stock["symbol"],
                   shares=-1 * shares,  # reduce number of shares
                   price=stock["price"]
                   )
        flash("Transaction Complete!")
        return redirect("/")
    
    else:
        
        rows = db.execute("""
        SELECT symbol
        FROM transaction_history
        WHERE user_id=:user_id
        GROUP BY symbol
        HAVING SUM(shares) > 0;
        """, user_id=session["user_id"])
    return render_template("sell.html", symbols=[row["symbol"] for row in rows])
    

def errorhandler(e):
    """Handle error"""
    if not isinstance(e, HTTPException):
        e = InternalServerError()
    return apology(e.name, e.code)


# Listen for errors
for code in default_exceptions:
    app.errorhandler(code)(errorhandler)
